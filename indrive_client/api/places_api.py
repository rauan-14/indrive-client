# coding: utf-8

"""
    Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from indrive_client.api_client import ApiClient


class PlacesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def place_schedule_get_public_v1_merchant_places_place_id_schedule_get(self, place_id, **kwargs):  # noqa: E501
        """Place Schedule:Get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.place_schedule_get_public_v1_merchant_places_place_id_schedule_get(place_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str place_id: (required)
        :return: WorkTimes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.place_schedule_get_public_v1_merchant_places_place_id_schedule_get_with_http_info(place_id, **kwargs)  # noqa: E501
        else:
            (data) = self.place_schedule_get_public_v1_merchant_places_place_id_schedule_get_with_http_info(place_id, **kwargs)  # noqa: E501
            return data

    def place_schedule_get_public_v1_merchant_places_place_id_schedule_get_with_http_info(self, place_id, **kwargs):  # noqa: E501
        """Place Schedule:Get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.place_schedule_get_public_v1_merchant_places_place_id_schedule_get_with_http_info(place_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str place_id: (required)
        :return: WorkTimes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['place_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method place_schedule_get_public_v1_merchant_places_place_id_schedule_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'place_id' is set
        if ('place_id' not in params or
                params['place_id'] is None):
            raise ValueError("Missing the required parameter `place_id` when calling `place_schedule_get_public_v1_merchant_places_place_id_schedule_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'place_id' in params:
            path_params['place_id'] = params['place_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/merchant/places/{place_id}/schedule', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkTimes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def place_schedule_update_public_v1_merchant_places_place_id_schedule_put(self, body, place_id, **kwargs):  # noqa: E501
        """Place Schedule:Update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.place_schedule_update_public_v1_merchant_places_place_id_schedule_put(body, place_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkTimesUpdate body: (required)
        :param str place_id: (required)
        :return: WorkTimes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.place_schedule_update_public_v1_merchant_places_place_id_schedule_put_with_http_info(body, place_id, **kwargs)  # noqa: E501
        else:
            (data) = self.place_schedule_update_public_v1_merchant_places_place_id_schedule_put_with_http_info(body, place_id, **kwargs)  # noqa: E501
            return data

    def place_schedule_update_public_v1_merchant_places_place_id_schedule_put_with_http_info(self, body, place_id, **kwargs):  # noqa: E501
        """Place Schedule:Update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.place_schedule_update_public_v1_merchant_places_place_id_schedule_put_with_http_info(body, place_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkTimesUpdate body: (required)
        :param str place_id: (required)
        :return: WorkTimes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'place_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method place_schedule_update_public_v1_merchant_places_place_id_schedule_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `place_schedule_update_public_v1_merchant_places_place_id_schedule_put`")  # noqa: E501
        # verify the required parameter 'place_id' is set
        if ('place_id' not in params or
                params['place_id'] is None):
            raise ValueError("Missing the required parameter `place_id` when calling `place_schedule_update_public_v1_merchant_places_place_id_schedule_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'place_id' in params:
            path_params['place_id'] = params['place_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/merchant/places/{place_id}/schedule', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkTimes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def places_block_public_v1_merchant_places_block_post(self, body, authorization, **kwargs):  # noqa: E501
        """Places:Block  # noqa: E501

        Blocks places for the specified period or endless. Use if you want to temporally stop orders creating for one or list of places  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.places_block_public_v1_merchant_places_block_post(body, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlaceBlockInRequest body: (required)
        :param str authorization: (required)
        :return: list[PlaceBlockInResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.places_block_public_v1_merchant_places_block_post_with_http_info(body, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.places_block_public_v1_merchant_places_block_post_with_http_info(body, authorization, **kwargs)  # noqa: E501
            return data

    def places_block_public_v1_merchant_places_block_post_with_http_info(self, body, authorization, **kwargs):  # noqa: E501
        """Places:Block  # noqa: E501

        Blocks places for the specified period or endless. Use if you want to temporally stop orders creating for one or list of places  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.places_block_public_v1_merchant_places_block_post_with_http_info(body, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlaceBlockInRequest body: (required)
        :param str authorization: (required)
        :return: list[PlaceBlockInResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method places_block_public_v1_merchant_places_block_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `places_block_public_v1_merchant_places_block_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `places_block_public_v1_merchant_places_block_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/merchant/places/block/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PlaceBlockInResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def places_blocks_public_v1_merchant_places_blocks_get(self, authorization, **kwargs):  # noqa: E501
        """Places:Blocks  # noqa: E501

        Returns list of active places blocks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.places_blocks_public_v1_merchant_places_blocks_get(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param list[str] place_ids:
        :param int limit:
        :param int offset:
        :return: list[PlaceBlockInResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.places_blocks_public_v1_merchant_places_blocks_get_with_http_info(authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.places_blocks_public_v1_merchant_places_blocks_get_with_http_info(authorization, **kwargs)  # noqa: E501
            return data

    def places_blocks_public_v1_merchant_places_blocks_get_with_http_info(self, authorization, **kwargs):  # noqa: E501
        """Places:Blocks  # noqa: E501

        Returns list of active places blocks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.places_blocks_public_v1_merchant_places_blocks_get_with_http_info(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param list[str] place_ids:
        :param int limit:
        :param int offset:
        :return: list[PlaceBlockInResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'place_ids', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method places_blocks_public_v1_merchant_places_blocks_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `places_blocks_public_v1_merchant_places_blocks_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'place_ids' in params:
            query_params.append(('place_ids', params['place_ids']))  # noqa: E501
            collection_formats['place_ids'] = 'multi'  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/merchant/places/blocks/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PlaceBlockInResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def places_create_public_v1_merchant_places_post(self, body, **kwargs):  # noqa: E501
        """Places:Create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.places_create_public_v1_merchant_places_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlaceWithArea body: (required)
        :return: PlaceInDB
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.places_create_public_v1_merchant_places_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.places_create_public_v1_merchant_places_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def places_create_public_v1_merchant_places_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Places:Create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.places_create_public_v1_merchant_places_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlaceWithArea body: (required)
        :return: PlaceInDB
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method places_create_public_v1_merchant_places_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `places_create_public_v1_merchant_places_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/merchant/places', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlaceInDB',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def places_list_public_v1_merchant_places_get(self, **kwargs):  # noqa: E501
        """Places:List  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.places_list_public_v1_merchant_places_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[PlaceInDB]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.places_list_public_v1_merchant_places_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.places_list_public_v1_merchant_places_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def places_list_public_v1_merchant_places_get_with_http_info(self, **kwargs):  # noqa: E501
        """Places:List  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.places_list_public_v1_merchant_places_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[PlaceInDB]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method places_list_public_v1_merchant_places_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/merchant/places', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PlaceInDB]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def places_order_check_public_v1_merchant_places_order_check_post(self, body, **kwargs):  # noqa: E501
        """Places:Order Check  # noqa: E501

        Check whether delivery from place is possible to adress  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.places_order_check_public_v1_merchant_places_order_check_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderCheckInRequest body: (required)
        :return: PlaceAccessList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.places_order_check_public_v1_merchant_places_order_check_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.places_order_check_public_v1_merchant_places_order_check_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def places_order_check_public_v1_merchant_places_order_check_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Places:Order Check  # noqa: E501

        Check whether delivery from place is possible to adress  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.places_order_check_public_v1_merchant_places_order_check_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderCheckInRequest body: (required)
        :return: PlaceAccessList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method places_order_check_public_v1_merchant_places_order_check_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `places_order_check_public_v1_merchant_places_order_check_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/merchant/places/order-check', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlaceAccessList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def places_unblock_public_v1_merchant_places_unblock_post(self, body, authorization, **kwargs):  # noqa: E501
        """Places:Unblock  # noqa: E501

        Unblocks places  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.places_unblock_public_v1_merchant_places_unblock_post(body, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlaceUnBlockInRequest body: (required)
        :param str authorization: (required)
        :return: list[PlaceBlockInResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.places_unblock_public_v1_merchant_places_unblock_post_with_http_info(body, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.places_unblock_public_v1_merchant_places_unblock_post_with_http_info(body, authorization, **kwargs)  # noqa: E501
            return data

    def places_unblock_public_v1_merchant_places_unblock_post_with_http_info(self, body, authorization, **kwargs):  # noqa: E501
        """Places:Unblock  # noqa: E501

        Unblocks places  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.places_unblock_public_v1_merchant_places_unblock_post_with_http_info(body, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlaceUnBlockInRequest body: (required)
        :param str authorization: (required)
        :return: list[PlaceBlockInResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method places_unblock_public_v1_merchant_places_unblock_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `places_unblock_public_v1_merchant_places_unblock_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `places_unblock_public_v1_merchant_places_unblock_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/merchant/places/unblock/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PlaceBlockInResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def places_update_public_v1_merchant_places_place_id_put(self, body, place_id, **kwargs):  # noqa: E501
        """Places:Update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.places_update_public_v1_merchant_places_place_id_put(body, place_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlaceUpdate body: (required)
        :param str place_id: (required)
        :return: PlaceInDB
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.places_update_public_v1_merchant_places_place_id_put_with_http_info(body, place_id, **kwargs)  # noqa: E501
        else:
            (data) = self.places_update_public_v1_merchant_places_place_id_put_with_http_info(body, place_id, **kwargs)  # noqa: E501
            return data

    def places_update_public_v1_merchant_places_place_id_put_with_http_info(self, body, place_id, **kwargs):  # noqa: E501
        """Places:Update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.places_update_public_v1_merchant_places_place_id_put_with_http_info(body, place_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlaceUpdate body: (required)
        :param str place_id: (required)
        :return: PlaceInDB
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'place_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method places_update_public_v1_merchant_places_place_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `places_update_public_v1_merchant_places_place_id_put`")  # noqa: E501
        # verify the required parameter 'place_id' is set
        if ('place_id' not in params or
                params['place_id'] is None):
            raise ValueError("Missing the required parameter `place_id` when calling `places_update_public_v1_merchant_places_place_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'place_id' in params:
            path_params['place_id'] = params['place_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/merchant/places/{place_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlaceInDB',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
