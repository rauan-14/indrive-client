# coding: utf-8

"""
    Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from indrive_client.api_client import ApiClient


class OrdersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def public_cancel_order_public_v1_orders_order_id_delete(self, body, order_id, **kwargs):  # noqa: E501
        """Public:Cancel Order  # noqa: E501

        Cancel order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_cancel_order_public_v1_orders_order_id_delete(body, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CancelOrderInRequest body: (required)
        :param str order_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_cancel_order_public_v1_orders_order_id_delete_with_http_info(body, order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.public_cancel_order_public_v1_orders_order_id_delete_with_http_info(body, order_id, **kwargs)  # noqa: E501
            return data

    def public_cancel_order_public_v1_orders_order_id_delete_with_http_info(self, body, order_id, **kwargs):  # noqa: E501
        """Public:Cancel Order  # noqa: E501

        Cancel order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_cancel_order_public_v1_orders_order_id_delete_with_http_info(body, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CancelOrderInRequest body: (required)
        :param str order_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_cancel_order_public_v1_orders_order_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `public_cancel_order_public_v1_orders_order_id_delete`")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `public_cancel_order_public_v1_orders_order_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/orders/{order_id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_create_order_public_v1_orders_post(self, body, **kwargs):  # noqa: E501
        """Public:Create Order  # noqa: E501

        Create order to delivery  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_create_order_public_v1_orders_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateOrderInRequest body: (required)
        :return: PublicOrderDetailForResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_create_order_public_v1_orders_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.public_create_order_public_v1_orders_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def public_create_order_public_v1_orders_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Public:Create Order  # noqa: E501

        Create order to delivery  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_create_order_public_v1_orders_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateOrderInRequest body: (required)
        :return: PublicOrderDetailForResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_create_order_public_v1_orders_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `public_create_order_public_v1_orders_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/orders/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PublicOrderDetailForResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_dry_run_public_v1_orders_dry_run_post(self, body, **kwargs):  # noqa: E501
        """Public:Dry Run  # noqa: E501

        Check whether order can be created  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_dry_run_public_v1_orders_dry_run_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderDryRun body: (required)
        :return: BaseSchemaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_dry_run_public_v1_orders_dry_run_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.public_dry_run_public_v1_orders_dry_run_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def public_dry_run_public_v1_orders_dry_run_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Public:Dry Run  # noqa: E501

        Check whether order can be created  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_dry_run_public_v1_orders_dry_run_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderDryRun body: (required)
        :return: BaseSchemaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_dry_run_public_v1_orders_dry_run_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `public_dry_run_public_v1_orders_dry_run_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/orders/dry_run/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseSchemaResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_get_courier_position_public_v1_orders_order_id_tracking_get(self, order_id, **kwargs):  # noqa: E501
        """Public:Get Courier Position  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_get_courier_position_public_v1_orders_order_id_tracking_get(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: (required)
        :return: PublicCourierPositionForResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_get_courier_position_public_v1_orders_order_id_tracking_get_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.public_get_courier_position_public_v1_orders_order_id_tracking_get_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def public_get_courier_position_public_v1_orders_order_id_tracking_get_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Public:Get Courier Position  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_get_courier_position_public_v1_orders_order_id_tracking_get_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: (required)
        :return: PublicCourierPositionForResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_get_courier_position_public_v1_orders_order_id_tracking_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `public_get_courier_position_public_v1_orders_order_id_tracking_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/orders/{order_id}/tracking/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PublicCourierPositionForResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_get_order_photos_public_v1_orders_order_id_photos_get(self, order_id, authorization, **kwargs):  # noqa: E501
        """Public:Get Order Photos  # noqa: E501

        Getting photos of the order  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_get_order_photos_public_v1_orders_order_id_photos_get(order_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: (required)
        :param str authorization: (required)
        :param list[OrderPhotoType] photo_type:
        :return: list[OrderPhotoForResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_get_order_photos_public_v1_orders_order_id_photos_get_with_http_info(order_id, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.public_get_order_photos_public_v1_orders_order_id_photos_get_with_http_info(order_id, authorization, **kwargs)  # noqa: E501
            return data

    def public_get_order_photos_public_v1_orders_order_id_photos_get_with_http_info(self, order_id, authorization, **kwargs):  # noqa: E501
        """Public:Get Order Photos  # noqa: E501

        Getting photos of the order  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_get_order_photos_public_v1_orders_order_id_photos_get_with_http_info(order_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: (required)
        :param str authorization: (required)
        :param list[OrderPhotoType] photo_type:
        :return: list[OrderPhotoForResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'authorization', 'photo_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_get_order_photos_public_v1_orders_order_id_photos_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `public_get_order_photos_public_v1_orders_order_id_photos_get`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `public_get_order_photos_public_v1_orders_order_id_photos_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']  # noqa: E501

        query_params = []
        if 'photo_type' in params:
            query_params.append(('photo_type', params['photo_type']))  # noqa: E501
            collection_formats['photo_type'] = 'multi'  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/orders/{order_id}/photos/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OrderPhotoForResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_get_order_public_v1_orders_order_id_get(self, order_id, **kwargs):  # noqa: E501
        """Public:Get Order  # noqa: E501

        Get order info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_get_order_public_v1_orders_order_id_get(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: (required)
        :return: PublicOrderDetailForResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_get_order_public_v1_orders_order_id_get_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.public_get_order_public_v1_orders_order_id_get_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def public_get_order_public_v1_orders_order_id_get_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Public:Get Order  # noqa: E501

        Get order info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_get_order_public_v1_orders_order_id_get_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: (required)
        :return: PublicOrderDetailForResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_get_order_public_v1_orders_order_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `public_get_order_public_v1_orders_order_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/orders/{order_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PublicOrderDetailForResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_return_order_public_v1_orders_order_id_return_patch(self, body, order_id, **kwargs):  # noqa: E501
        """Public:Return Order  # noqa: E501

        Return products of order (deprecated)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_return_order_public_v1_orders_order_id_return_patch(body, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReturnProductsInRequest body: (required)
        :param str order_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_return_order_public_v1_orders_order_id_return_patch_with_http_info(body, order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.public_return_order_public_v1_orders_order_id_return_patch_with_http_info(body, order_id, **kwargs)  # noqa: E501
            return data

    def public_return_order_public_v1_orders_order_id_return_patch_with_http_info(self, body, order_id, **kwargs):  # noqa: E501
        """Public:Return Order  # noqa: E501

        Return products of order (deprecated)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_return_order_public_v1_orders_order_id_return_patch_with_http_info(body, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReturnProductsInRequest body: (required)
        :param str order_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_return_order_public_v1_orders_order_id_return_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `public_return_order_public_v1_orders_order_id_return_patch`")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `public_return_order_public_v1_orders_order_id_return_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/orders/{order_id}/return/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_return_order_public_v2_orders_order_id_return_patch(self, body, order_id, **kwargs):  # noqa: E501
        """Public:Return Order  # noqa: E501

        Return products of order  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_return_order_public_v2_orders_order_id_return_patch(body, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReturnProductsInRequestV2 body: (required)
        :param str order_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_return_order_public_v2_orders_order_id_return_patch_with_http_info(body, order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.public_return_order_public_v2_orders_order_id_return_patch_with_http_info(body, order_id, **kwargs)  # noqa: E501
            return data

    def public_return_order_public_v2_orders_order_id_return_patch_with_http_info(self, body, order_id, **kwargs):  # noqa: E501
        """Public:Return Order  # noqa: E501

        Return products of order  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_return_order_public_v2_orders_order_id_return_patch_with_http_info(body, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReturnProductsInRequestV2 body: (required)
        :param str order_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_return_order_public_v2_orders_order_id_return_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `public_return_order_public_v2_orders_order_id_return_patch`")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `public_return_order_public_v2_orders_order_id_return_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/{order_id}/return/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_update_order_public_v1_orders_order_id_patch(self, body, order_id, **kwargs):  # noqa: E501
        """Public:Update Order  # noqa: E501

        Update order. Undesirable to use to cancel an order  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_update_order_public_v1_orders_order_id_patch(body, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateOrderInRequest body: (required)
        :param str order_id: (required)
        :return: PublicOrderDetailForResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_update_order_public_v1_orders_order_id_patch_with_http_info(body, order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.public_update_order_public_v1_orders_order_id_patch_with_http_info(body, order_id, **kwargs)  # noqa: E501
            return data

    def public_update_order_public_v1_orders_order_id_patch_with_http_info(self, body, order_id, **kwargs):  # noqa: E501
        """Public:Update Order  # noqa: E501

        Update order. Undesirable to use to cancel an order  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_update_order_public_v1_orders_order_id_patch_with_http_info(body, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateOrderInRequest body: (required)
        :param str order_id: (required)
        :return: PublicOrderDetailForResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_update_order_public_v1_orders_order_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `public_update_order_public_v1_orders_order_id_patch`")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `public_update_order_public_v1_orders_order_id_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/orders/{order_id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PublicOrderDetailForResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
