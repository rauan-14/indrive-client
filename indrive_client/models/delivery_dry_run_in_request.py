# coding: utf-8

"""
    Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeliveryDryRunInRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expected_time': 'datetime',
        'consumer_data': 'str',
        'region': 'str',
        'street': 'str',
        'house_number': 'str',
        'flat_number': 'str',
        'entrance': 'str',
        'intercom': 'str',
        'floor': 'str',
        'location': 'Point',
        'comment': 'str',
        'attributes': 'DeliveryAttributes'
    }

    attribute_map = {
        'expected_time': 'expected_time',
        'consumer_data': 'consumer_data',
        'region': 'region',
        'street': 'street',
        'house_number': 'house_number',
        'flat_number': 'flat_number',
        'entrance': 'entrance',
        'intercom': 'intercom',
        'floor': 'floor',
        'location': 'location',
        'comment': 'comment',
        'attributes': 'attributes'
    }

    def __init__(self, expected_time=None, consumer_data=None, region='', street=None, house_number='', flat_number=None, entrance=None, intercom=None, floor=None, location=None, comment=None, attributes=None):  # noqa: E501
        """DeliveryDryRunInRequest - a model defined in Swagger"""  # noqa: E501
        self._expected_time = None
        self._consumer_data = None
        self._region = None
        self._street = None
        self._house_number = None
        self._flat_number = None
        self._entrance = None
        self._intercom = None
        self._floor = None
        self._location = None
        self._comment = None
        self._attributes = None
        self.discriminator = None
        if expected_time is not None:
            self.expected_time = expected_time
        self.consumer_data = consumer_data
        if region is not None:
            self.region = region
        self.street = street
        if house_number is not None:
            self.house_number = house_number
        if flat_number is not None:
            self.flat_number = flat_number
        if entrance is not None:
            self.entrance = entrance
        if intercom is not None:
            self.intercom = intercom
        if floor is not None:
            self.floor = floor
        if location is not None:
            self.location = location
        if comment is not None:
            self.comment = comment
        if attributes is not None:
            self.attributes = attributes

    @property
    def expected_time(self):
        """Gets the expected_time of this DeliveryDryRunInRequest.  # noqa: E501


        :return: The expected_time of this DeliveryDryRunInRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._expected_time

    @expected_time.setter
    def expected_time(self, expected_time):
        """Sets the expected_time of this DeliveryDryRunInRequest.


        :param expected_time: The expected_time of this DeliveryDryRunInRequest.  # noqa: E501
        :type: datetime
        """

        self._expected_time = expected_time

    @property
    def consumer_data(self):
        """Gets the consumer_data of this DeliveryDryRunInRequest.  # noqa: E501


        :return: The consumer_data of this DeliveryDryRunInRequest.  # noqa: E501
        :rtype: str
        """
        return self._consumer_data

    @consumer_data.setter
    def consumer_data(self, consumer_data):
        """Sets the consumer_data of this DeliveryDryRunInRequest.


        :param consumer_data: The consumer_data of this DeliveryDryRunInRequest.  # noqa: E501
        :type: str
        """
        if consumer_data is None:
            raise ValueError("Invalid value for `consumer_data`, must not be `None`")  # noqa: E501

        self._consumer_data = consumer_data

    @property
    def region(self):
        """Gets the region of this DeliveryDryRunInRequest.  # noqa: E501


        :return: The region of this DeliveryDryRunInRequest.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this DeliveryDryRunInRequest.


        :param region: The region of this DeliveryDryRunInRequest.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def street(self):
        """Gets the street of this DeliveryDryRunInRequest.  # noqa: E501


        :return: The street of this DeliveryDryRunInRequest.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this DeliveryDryRunInRequest.


        :param street: The street of this DeliveryDryRunInRequest.  # noqa: E501
        :type: str
        """
        if street is None:
            raise ValueError("Invalid value for `street`, must not be `None`")  # noqa: E501

        self._street = street

    @property
    def house_number(self):
        """Gets the house_number of this DeliveryDryRunInRequest.  # noqa: E501


        :return: The house_number of this DeliveryDryRunInRequest.  # noqa: E501
        :rtype: str
        """
        return self._house_number

    @house_number.setter
    def house_number(self, house_number):
        """Sets the house_number of this DeliveryDryRunInRequest.


        :param house_number: The house_number of this DeliveryDryRunInRequest.  # noqa: E501
        :type: str
        """

        self._house_number = house_number

    @property
    def flat_number(self):
        """Gets the flat_number of this DeliveryDryRunInRequest.  # noqa: E501


        :return: The flat_number of this DeliveryDryRunInRequest.  # noqa: E501
        :rtype: str
        """
        return self._flat_number

    @flat_number.setter
    def flat_number(self, flat_number):
        """Sets the flat_number of this DeliveryDryRunInRequest.


        :param flat_number: The flat_number of this DeliveryDryRunInRequest.  # noqa: E501
        :type: str
        """

        self._flat_number = flat_number

    @property
    def entrance(self):
        """Gets the entrance of this DeliveryDryRunInRequest.  # noqa: E501


        :return: The entrance of this DeliveryDryRunInRequest.  # noqa: E501
        :rtype: str
        """
        return self._entrance

    @entrance.setter
    def entrance(self, entrance):
        """Sets the entrance of this DeliveryDryRunInRequest.


        :param entrance: The entrance of this DeliveryDryRunInRequest.  # noqa: E501
        :type: str
        """

        self._entrance = entrance

    @property
    def intercom(self):
        """Gets the intercom of this DeliveryDryRunInRequest.  # noqa: E501


        :return: The intercom of this DeliveryDryRunInRequest.  # noqa: E501
        :rtype: str
        """
        return self._intercom

    @intercom.setter
    def intercom(self, intercom):
        """Sets the intercom of this DeliveryDryRunInRequest.


        :param intercom: The intercom of this DeliveryDryRunInRequest.  # noqa: E501
        :type: str
        """

        self._intercom = intercom

    @property
    def floor(self):
        """Gets the floor of this DeliveryDryRunInRequest.  # noqa: E501


        :return: The floor of this DeliveryDryRunInRequest.  # noqa: E501
        :rtype: str
        """
        return self._floor

    @floor.setter
    def floor(self, floor):
        """Sets the floor of this DeliveryDryRunInRequest.


        :param floor: The floor of this DeliveryDryRunInRequest.  # noqa: E501
        :type: str
        """

        self._floor = floor

    @property
    def location(self):
        """Gets the location of this DeliveryDryRunInRequest.  # noqa: E501


        :return: The location of this DeliveryDryRunInRequest.  # noqa: E501
        :rtype: Point
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DeliveryDryRunInRequest.


        :param location: The location of this DeliveryDryRunInRequest.  # noqa: E501
        :type: Point
        """

        self._location = location

    @property
    def comment(self):
        """Gets the comment of this DeliveryDryRunInRequest.  # noqa: E501


        :return: The comment of this DeliveryDryRunInRequest.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this DeliveryDryRunInRequest.


        :param comment: The comment of this DeliveryDryRunInRequest.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def attributes(self):
        """Gets the attributes of this DeliveryDryRunInRequest.  # noqa: E501


        :return: The attributes of this DeliveryDryRunInRequest.  # noqa: E501
        :rtype: DeliveryAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this DeliveryDryRunInRequest.


        :param attributes: The attributes of this DeliveryDryRunInRequest.  # noqa: E501
        :type: DeliveryAttributes
        """

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeliveryDryRunInRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeliveryDryRunInRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
