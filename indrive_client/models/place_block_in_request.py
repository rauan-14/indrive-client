# coding: utf-8

"""
    Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlaceBlockInRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'place_ids': 'list[str]',
        'datetime_from': 'datetime',
        'datetime_to': 'datetime',
        'block_reason': 'str',
        'extra_data': 'object'
    }

    attribute_map = {
        'place_ids': 'place_ids',
        'datetime_from': 'datetime_from',
        'datetime_to': 'datetime_to',
        'block_reason': 'block_reason',
        'extra_data': 'extra_data'
    }

    def __init__(self, place_ids=None, datetime_from=None, datetime_to=None, block_reason=None, extra_data=None):  # noqa: E501
        """PlaceBlockInRequest - a model defined in Swagger"""  # noqa: E501
        self._place_ids = None
        self._datetime_from = None
        self._datetime_to = None
        self._block_reason = None
        self._extra_data = None
        self.discriminator = None
        self.place_ids = place_ids
        self.datetime_from = datetime_from
        if datetime_to is not None:
            self.datetime_to = datetime_to
        if block_reason is not None:
            self.block_reason = block_reason
        if extra_data is not None:
            self.extra_data = extra_data

    @property
    def place_ids(self):
        """Gets the place_ids of this PlaceBlockInRequest.  # noqa: E501


        :return: The place_ids of this PlaceBlockInRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._place_ids

    @place_ids.setter
    def place_ids(self, place_ids):
        """Sets the place_ids of this PlaceBlockInRequest.


        :param place_ids: The place_ids of this PlaceBlockInRequest.  # noqa: E501
        :type: list[str]
        """
        if place_ids is None:
            raise ValueError("Invalid value for `place_ids`, must not be `None`")  # noqa: E501

        self._place_ids = place_ids

    @property
    def datetime_from(self):
        """Gets the datetime_from of this PlaceBlockInRequest.  # noqa: E501


        :return: The datetime_from of this PlaceBlockInRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._datetime_from

    @datetime_from.setter
    def datetime_from(self, datetime_from):
        """Sets the datetime_from of this PlaceBlockInRequest.


        :param datetime_from: The datetime_from of this PlaceBlockInRequest.  # noqa: E501
        :type: datetime
        """
        if datetime_from is None:
            raise ValueError("Invalid value for `datetime_from`, must not be `None`")  # noqa: E501

        self._datetime_from = datetime_from

    @property
    def datetime_to(self):
        """Gets the datetime_to of this PlaceBlockInRequest.  # noqa: E501


        :return: The datetime_to of this PlaceBlockInRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._datetime_to

    @datetime_to.setter
    def datetime_to(self, datetime_to):
        """Sets the datetime_to of this PlaceBlockInRequest.


        :param datetime_to: The datetime_to of this PlaceBlockInRequest.  # noqa: E501
        :type: datetime
        """

        self._datetime_to = datetime_to

    @property
    def block_reason(self):
        """Gets the block_reason of this PlaceBlockInRequest.  # noqa: E501


        :return: The block_reason of this PlaceBlockInRequest.  # noqa: E501
        :rtype: str
        """
        return self._block_reason

    @block_reason.setter
    def block_reason(self, block_reason):
        """Sets the block_reason of this PlaceBlockInRequest.


        :param block_reason: The block_reason of this PlaceBlockInRequest.  # noqa: E501
        :type: str
        """

        self._block_reason = block_reason

    @property
    def extra_data(self):
        """Gets the extra_data of this PlaceBlockInRequest.  # noqa: E501


        :return: The extra_data of this PlaceBlockInRequest.  # noqa: E501
        :rtype: object
        """
        return self._extra_data

    @extra_data.setter
    def extra_data(self, extra_data):
        """Sets the extra_data of this PlaceBlockInRequest.


        :param extra_data: The extra_data of this PlaceBlockInRequest.  # noqa: E501
        :type: object
        """

        self._extra_data = extra_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlaceBlockInRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlaceBlockInRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
