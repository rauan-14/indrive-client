# coding: utf-8

"""
    Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateOrderInRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'OrderStatusEnum',
        'payment_status': 'PaymentStatusEnum',
        'cost': 'float',
        'additional_cost': 'float',
        'change_cost': 'float',
        'customer_name': 'str',
        'customer_phone': 'str',
        'customer_email': 'str',
        'person_count': 'int',
        'comment': 'str',
        'cancel_code': 'OrderCancelCodeEnum',
        'cancel_reason': 'str',
        'delivery': 'UpdateDeliveryInRequest',
        'products': 'list[CreateProductInRequest]'
    }

    attribute_map = {
        'status': 'status',
        'payment_status': 'payment_status',
        'cost': 'cost',
        'additional_cost': 'additional_cost',
        'change_cost': 'change_cost',
        'customer_name': 'customer_name',
        'customer_phone': 'customer_phone',
        'customer_email': 'customer_email',
        'person_count': 'person_count',
        'comment': 'comment',
        'cancel_code': 'cancel_code',
        'cancel_reason': 'cancel_reason',
        'delivery': 'delivery',
        'products': 'products'
    }

    def __init__(self, status=None, payment_status=None, cost=None, additional_cost=None, change_cost=None, customer_name=None, customer_phone=None, customer_email=None, person_count=None, comment=None, cancel_code=None, cancel_reason=None, delivery=None, products=None):  # noqa: E501
        """UpdateOrderInRequest - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._payment_status = None
        self._cost = None
        self._additional_cost = None
        self._change_cost = None
        self._customer_name = None
        self._customer_phone = None
        self._customer_email = None
        self._person_count = None
        self._comment = None
        self._cancel_code = None
        self._cancel_reason = None
        self._delivery = None
        self._products = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if payment_status is not None:
            self.payment_status = payment_status
        if cost is not None:
            self.cost = cost
        if additional_cost is not None:
            self.additional_cost = additional_cost
        if change_cost is not None:
            self.change_cost = change_cost
        if customer_name is not None:
            self.customer_name = customer_name
        if customer_phone is not None:
            self.customer_phone = customer_phone
        if customer_email is not None:
            self.customer_email = customer_email
        if person_count is not None:
            self.person_count = person_count
        if comment is not None:
            self.comment = comment
        if cancel_code is not None:
            self.cancel_code = cancel_code
        if cancel_reason is not None:
            self.cancel_reason = cancel_reason
        if delivery is not None:
            self.delivery = delivery
        if products is not None:
            self.products = products

    @property
    def status(self):
        """Gets the status of this UpdateOrderInRequest.  # noqa: E501


        :return: The status of this UpdateOrderInRequest.  # noqa: E501
        :rtype: OrderStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateOrderInRequest.


        :param status: The status of this UpdateOrderInRequest.  # noqa: E501
        :type: OrderStatusEnum
        """

        self._status = status

    @property
    def payment_status(self):
        """Gets the payment_status of this UpdateOrderInRequest.  # noqa: E501


        :return: The payment_status of this UpdateOrderInRequest.  # noqa: E501
        :rtype: PaymentStatusEnum
        """
        return self._payment_status

    @payment_status.setter
    def payment_status(self, payment_status):
        """Sets the payment_status of this UpdateOrderInRequest.


        :param payment_status: The payment_status of this UpdateOrderInRequest.  # noqa: E501
        :type: PaymentStatusEnum
        """

        self._payment_status = payment_status

    @property
    def cost(self):
        """Gets the cost of this UpdateOrderInRequest.  # noqa: E501


        :return: The cost of this UpdateOrderInRequest.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this UpdateOrderInRequest.


        :param cost: The cost of this UpdateOrderInRequest.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def additional_cost(self):
        """Gets the additional_cost of this UpdateOrderInRequest.  # noqa: E501


        :return: The additional_cost of this UpdateOrderInRequest.  # noqa: E501
        :rtype: float
        """
        return self._additional_cost

    @additional_cost.setter
    def additional_cost(self, additional_cost):
        """Sets the additional_cost of this UpdateOrderInRequest.


        :param additional_cost: The additional_cost of this UpdateOrderInRequest.  # noqa: E501
        :type: float
        """

        self._additional_cost = additional_cost

    @property
    def change_cost(self):
        """Gets the change_cost of this UpdateOrderInRequest.  # noqa: E501


        :return: The change_cost of this UpdateOrderInRequest.  # noqa: E501
        :rtype: float
        """
        return self._change_cost

    @change_cost.setter
    def change_cost(self, change_cost):
        """Sets the change_cost of this UpdateOrderInRequest.


        :param change_cost: The change_cost of this UpdateOrderInRequest.  # noqa: E501
        :type: float
        """

        self._change_cost = change_cost

    @property
    def customer_name(self):
        """Gets the customer_name of this UpdateOrderInRequest.  # noqa: E501


        :return: The customer_name of this UpdateOrderInRequest.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this UpdateOrderInRequest.


        :param customer_name: The customer_name of this UpdateOrderInRequest.  # noqa: E501
        :type: str
        """

        self._customer_name = customer_name

    @property
    def customer_phone(self):
        """Gets the customer_phone of this UpdateOrderInRequest.  # noqa: E501


        :return: The customer_phone of this UpdateOrderInRequest.  # noqa: E501
        :rtype: str
        """
        return self._customer_phone

    @customer_phone.setter
    def customer_phone(self, customer_phone):
        """Sets the customer_phone of this UpdateOrderInRequest.


        :param customer_phone: The customer_phone of this UpdateOrderInRequest.  # noqa: E501
        :type: str
        """

        self._customer_phone = customer_phone

    @property
    def customer_email(self):
        """Gets the customer_email of this UpdateOrderInRequest.  # noqa: E501


        :return: The customer_email of this UpdateOrderInRequest.  # noqa: E501
        :rtype: str
        """
        return self._customer_email

    @customer_email.setter
    def customer_email(self, customer_email):
        """Sets the customer_email of this UpdateOrderInRequest.


        :param customer_email: The customer_email of this UpdateOrderInRequest.  # noqa: E501
        :type: str
        """

        self._customer_email = customer_email

    @property
    def person_count(self):
        """Gets the person_count of this UpdateOrderInRequest.  # noqa: E501


        :return: The person_count of this UpdateOrderInRequest.  # noqa: E501
        :rtype: int
        """
        return self._person_count

    @person_count.setter
    def person_count(self, person_count):
        """Sets the person_count of this UpdateOrderInRequest.


        :param person_count: The person_count of this UpdateOrderInRequest.  # noqa: E501
        :type: int
        """

        self._person_count = person_count

    @property
    def comment(self):
        """Gets the comment of this UpdateOrderInRequest.  # noqa: E501


        :return: The comment of this UpdateOrderInRequest.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this UpdateOrderInRequest.


        :param comment: The comment of this UpdateOrderInRequest.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def cancel_code(self):
        """Gets the cancel_code of this UpdateOrderInRequest.  # noqa: E501


        :return: The cancel_code of this UpdateOrderInRequest.  # noqa: E501
        :rtype: OrderCancelCodeEnum
        """
        return self._cancel_code

    @cancel_code.setter
    def cancel_code(self, cancel_code):
        """Sets the cancel_code of this UpdateOrderInRequest.


        :param cancel_code: The cancel_code of this UpdateOrderInRequest.  # noqa: E501
        :type: OrderCancelCodeEnum
        """

        self._cancel_code = cancel_code

    @property
    def cancel_reason(self):
        """Gets the cancel_reason of this UpdateOrderInRequest.  # noqa: E501


        :return: The cancel_reason of this UpdateOrderInRequest.  # noqa: E501
        :rtype: str
        """
        return self._cancel_reason

    @cancel_reason.setter
    def cancel_reason(self, cancel_reason):
        """Sets the cancel_reason of this UpdateOrderInRequest.


        :param cancel_reason: The cancel_reason of this UpdateOrderInRequest.  # noqa: E501
        :type: str
        """

        self._cancel_reason = cancel_reason

    @property
    def delivery(self):
        """Gets the delivery of this UpdateOrderInRequest.  # noqa: E501


        :return: The delivery of this UpdateOrderInRequest.  # noqa: E501
        :rtype: UpdateDeliveryInRequest
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this UpdateOrderInRequest.


        :param delivery: The delivery of this UpdateOrderInRequest.  # noqa: E501
        :type: UpdateDeliveryInRequest
        """

        self._delivery = delivery

    @property
    def products(self):
        """Gets the products of this UpdateOrderInRequest.  # noqa: E501


        :return: The products of this UpdateOrderInRequest.  # noqa: E501
        :rtype: list[CreateProductInRequest]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this UpdateOrderInRequest.


        :param products: The products of this UpdateOrderInRequest.  # noqa: E501
        :type: list[CreateProductInRequest]
        """

        self._products = products

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateOrderInRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateOrderInRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
