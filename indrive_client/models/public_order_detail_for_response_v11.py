# coding: utf-8

"""
    Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PublicOrderDetailForResponseV11(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'order_id': 'str',
        'merchant': 'OrderMerchant',
        'place_id': 'str',
        'status': 'OrderStatusEnum',
        'payment_status': 'PaymentStatusEnum',
        'cost': 'OrderCost',
        'customer': 'OrderCustomer',
        'person_count': 'int',
        'comment': 'str',
        'cancel_code': 'OrderCancelCodeEnum',
        'cancel_reason': 'str',
        'is_force_start': 'bool',
        'delivery': 'PublicDeliveryForResponseV11',
        'products': 'list[ProductForResponse]',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'additional_services': 'list[AdditionalServiceCodeNameOnly]'
    }

    attribute_map = {
        'id': 'id',
        'order_id': 'order_id',
        'merchant': 'merchant',
        'place_id': 'place_id',
        'status': 'status',
        'payment_status': 'payment_status',
        'cost': 'cost',
        'customer': 'customer',
        'person_count': 'person_count',
        'comment': 'comment',
        'cancel_code': 'cancel_code',
        'cancel_reason': 'cancel_reason',
        'is_force_start': 'is_force_start',
        'delivery': 'delivery',
        'products': 'products',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'additional_services': 'additional_services'
    }

    def __init__(self, id=None, order_id=None, merchant=None, place_id=None, status=None, payment_status=None, cost=None, customer=None, person_count=None, comment=None, cancel_code=None, cancel_reason=None, is_force_start=None, delivery=None, products=None, created_at=None, updated_at=None, additional_services=None):  # noqa: E501
        """PublicOrderDetailForResponseV11 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._order_id = None
        self._merchant = None
        self._place_id = None
        self._status = None
        self._payment_status = None
        self._cost = None
        self._customer = None
        self._person_count = None
        self._comment = None
        self._cancel_code = None
        self._cancel_reason = None
        self._is_force_start = None
        self._delivery = None
        self._products = None
        self._created_at = None
        self._updated_at = None
        self._additional_services = None
        self.discriminator = None
        self.id = id
        self.order_id = order_id
        self.merchant = merchant
        if place_id is not None:
            self.place_id = place_id
        self.status = status
        self.payment_status = payment_status
        self.cost = cost
        self.customer = customer
        self.person_count = person_count
        if comment is not None:
            self.comment = comment
        if cancel_code is not None:
            self.cancel_code = cancel_code
        if cancel_reason is not None:
            self.cancel_reason = cancel_reason
        self.is_force_start = is_force_start
        self.delivery = delivery
        if products is not None:
            self.products = products
        self.created_at = created_at
        self.updated_at = updated_at
        if additional_services is not None:
            self.additional_services = additional_services

    @property
    def id(self):
        """Gets the id of this PublicOrderDetailForResponseV11.  # noqa: E501


        :return: The id of this PublicOrderDetailForResponseV11.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PublicOrderDetailForResponseV11.


        :param id: The id of this PublicOrderDetailForResponseV11.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def order_id(self):
        """Gets the order_id of this PublicOrderDetailForResponseV11.  # noqa: E501


        :return: The order_id of this PublicOrderDetailForResponseV11.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this PublicOrderDetailForResponseV11.


        :param order_id: The order_id of this PublicOrderDetailForResponseV11.  # noqa: E501
        :type: str
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")  # noqa: E501

        self._order_id = order_id

    @property
    def merchant(self):
        """Gets the merchant of this PublicOrderDetailForResponseV11.  # noqa: E501


        :return: The merchant of this PublicOrderDetailForResponseV11.  # noqa: E501
        :rtype: OrderMerchant
        """
        return self._merchant

    @merchant.setter
    def merchant(self, merchant):
        """Sets the merchant of this PublicOrderDetailForResponseV11.


        :param merchant: The merchant of this PublicOrderDetailForResponseV11.  # noqa: E501
        :type: OrderMerchant
        """
        if merchant is None:
            raise ValueError("Invalid value for `merchant`, must not be `None`")  # noqa: E501

        self._merchant = merchant

    @property
    def place_id(self):
        """Gets the place_id of this PublicOrderDetailForResponseV11.  # noqa: E501


        :return: The place_id of this PublicOrderDetailForResponseV11.  # noqa: E501
        :rtype: str
        """
        return self._place_id

    @place_id.setter
    def place_id(self, place_id):
        """Sets the place_id of this PublicOrderDetailForResponseV11.


        :param place_id: The place_id of this PublicOrderDetailForResponseV11.  # noqa: E501
        :type: str
        """

        self._place_id = place_id

    @property
    def status(self):
        """Gets the status of this PublicOrderDetailForResponseV11.  # noqa: E501


        :return: The status of this PublicOrderDetailForResponseV11.  # noqa: E501
        :rtype: OrderStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PublicOrderDetailForResponseV11.


        :param status: The status of this PublicOrderDetailForResponseV11.  # noqa: E501
        :type: OrderStatusEnum
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def payment_status(self):
        """Gets the payment_status of this PublicOrderDetailForResponseV11.  # noqa: E501


        :return: The payment_status of this PublicOrderDetailForResponseV11.  # noqa: E501
        :rtype: PaymentStatusEnum
        """
        return self._payment_status

    @payment_status.setter
    def payment_status(self, payment_status):
        """Sets the payment_status of this PublicOrderDetailForResponseV11.


        :param payment_status: The payment_status of this PublicOrderDetailForResponseV11.  # noqa: E501
        :type: PaymentStatusEnum
        """
        if payment_status is None:
            raise ValueError("Invalid value for `payment_status`, must not be `None`")  # noqa: E501

        self._payment_status = payment_status

    @property
    def cost(self):
        """Gets the cost of this PublicOrderDetailForResponseV11.  # noqa: E501


        :return: The cost of this PublicOrderDetailForResponseV11.  # noqa: E501
        :rtype: OrderCost
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this PublicOrderDetailForResponseV11.


        :param cost: The cost of this PublicOrderDetailForResponseV11.  # noqa: E501
        :type: OrderCost
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")  # noqa: E501

        self._cost = cost

    @property
    def customer(self):
        """Gets the customer of this PublicOrderDetailForResponseV11.  # noqa: E501


        :return: The customer of this PublicOrderDetailForResponseV11.  # noqa: E501
        :rtype: OrderCustomer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this PublicOrderDetailForResponseV11.


        :param customer: The customer of this PublicOrderDetailForResponseV11.  # noqa: E501
        :type: OrderCustomer
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")  # noqa: E501

        self._customer = customer

    @property
    def person_count(self):
        """Gets the person_count of this PublicOrderDetailForResponseV11.  # noqa: E501


        :return: The person_count of this PublicOrderDetailForResponseV11.  # noqa: E501
        :rtype: int
        """
        return self._person_count

    @person_count.setter
    def person_count(self, person_count):
        """Sets the person_count of this PublicOrderDetailForResponseV11.


        :param person_count: The person_count of this PublicOrderDetailForResponseV11.  # noqa: E501
        :type: int
        """
        if person_count is None:
            raise ValueError("Invalid value for `person_count`, must not be `None`")  # noqa: E501

        self._person_count = person_count

    @property
    def comment(self):
        """Gets the comment of this PublicOrderDetailForResponseV11.  # noqa: E501


        :return: The comment of this PublicOrderDetailForResponseV11.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this PublicOrderDetailForResponseV11.


        :param comment: The comment of this PublicOrderDetailForResponseV11.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def cancel_code(self):
        """Gets the cancel_code of this PublicOrderDetailForResponseV11.  # noqa: E501


        :return: The cancel_code of this PublicOrderDetailForResponseV11.  # noqa: E501
        :rtype: OrderCancelCodeEnum
        """
        return self._cancel_code

    @cancel_code.setter
    def cancel_code(self, cancel_code):
        """Sets the cancel_code of this PublicOrderDetailForResponseV11.


        :param cancel_code: The cancel_code of this PublicOrderDetailForResponseV11.  # noqa: E501
        :type: OrderCancelCodeEnum
        """

        self._cancel_code = cancel_code

    @property
    def cancel_reason(self):
        """Gets the cancel_reason of this PublicOrderDetailForResponseV11.  # noqa: E501


        :return: The cancel_reason of this PublicOrderDetailForResponseV11.  # noqa: E501
        :rtype: str
        """
        return self._cancel_reason

    @cancel_reason.setter
    def cancel_reason(self, cancel_reason):
        """Sets the cancel_reason of this PublicOrderDetailForResponseV11.


        :param cancel_reason: The cancel_reason of this PublicOrderDetailForResponseV11.  # noqa: E501
        :type: str
        """

        self._cancel_reason = cancel_reason

    @property
    def is_force_start(self):
        """Gets the is_force_start of this PublicOrderDetailForResponseV11.  # noqa: E501


        :return: The is_force_start of this PublicOrderDetailForResponseV11.  # noqa: E501
        :rtype: bool
        """
        return self._is_force_start

    @is_force_start.setter
    def is_force_start(self, is_force_start):
        """Sets the is_force_start of this PublicOrderDetailForResponseV11.


        :param is_force_start: The is_force_start of this PublicOrderDetailForResponseV11.  # noqa: E501
        :type: bool
        """
        if is_force_start is None:
            raise ValueError("Invalid value for `is_force_start`, must not be `None`")  # noqa: E501

        self._is_force_start = is_force_start

    @property
    def delivery(self):
        """Gets the delivery of this PublicOrderDetailForResponseV11.  # noqa: E501


        :return: The delivery of this PublicOrderDetailForResponseV11.  # noqa: E501
        :rtype: PublicDeliveryForResponseV11
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this PublicOrderDetailForResponseV11.


        :param delivery: The delivery of this PublicOrderDetailForResponseV11.  # noqa: E501
        :type: PublicDeliveryForResponseV11
        """
        if delivery is None:
            raise ValueError("Invalid value for `delivery`, must not be `None`")  # noqa: E501

        self._delivery = delivery

    @property
    def products(self):
        """Gets the products of this PublicOrderDetailForResponseV11.  # noqa: E501


        :return: The products of this PublicOrderDetailForResponseV11.  # noqa: E501
        :rtype: list[ProductForResponse]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this PublicOrderDetailForResponseV11.


        :param products: The products of this PublicOrderDetailForResponseV11.  # noqa: E501
        :type: list[ProductForResponse]
        """

        self._products = products

    @property
    def created_at(self):
        """Gets the created_at of this PublicOrderDetailForResponseV11.  # noqa: E501


        :return: The created_at of this PublicOrderDetailForResponseV11.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PublicOrderDetailForResponseV11.


        :param created_at: The created_at of this PublicOrderDetailForResponseV11.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this PublicOrderDetailForResponseV11.  # noqa: E501


        :return: The updated_at of this PublicOrderDetailForResponseV11.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PublicOrderDetailForResponseV11.


        :param updated_at: The updated_at of this PublicOrderDetailForResponseV11.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def additional_services(self):
        """Gets the additional_services of this PublicOrderDetailForResponseV11.  # noqa: E501


        :return: The additional_services of this PublicOrderDetailForResponseV11.  # noqa: E501
        :rtype: list[AdditionalServiceCodeNameOnly]
        """
        return self._additional_services

    @additional_services.setter
    def additional_services(self, additional_services):
        """Sets the additional_services of this PublicOrderDetailForResponseV11.


        :param additional_services: The additional_services of this PublicOrderDetailForResponseV11.  # noqa: E501
        :type: list[AdditionalServiceCodeNameOnly]
        """

        self._additional_services = additional_services

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublicOrderDetailForResponseV11, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicOrderDetailForResponseV11):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
