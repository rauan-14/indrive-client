# coding: utf-8

"""
    Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PublicCourierPositionForResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_id': 'str',
        'courier_id': 'str',
        'order_status': 'str',
        'courier_name': 'str',
        'phone_number': 'str',
        'location': 'Point',
        'passport': 'Passport',
        'vehicle': 'Vehicle'
    }

    attribute_map = {
        'order_id': 'order_id',
        'courier_id': 'courier_id',
        'order_status': 'order_status',
        'courier_name': 'courier_name',
        'phone_number': 'phone_number',
        'location': 'location',
        'passport': 'passport',
        'vehicle': 'vehicle'
    }

    def __init__(self, order_id=None, courier_id=None, order_status=None, courier_name=None, phone_number=None, location=None, passport=None, vehicle=None):  # noqa: E501
        """PublicCourierPositionForResponse - a model defined in Swagger"""  # noqa: E501
        self._order_id = None
        self._courier_id = None
        self._order_status = None
        self._courier_name = None
        self._phone_number = None
        self._location = None
        self._passport = None
        self._vehicle = None
        self.discriminator = None
        self.order_id = order_id
        self.courier_id = courier_id
        self.order_status = order_status
        self.courier_name = courier_name
        if phone_number is not None:
            self.phone_number = phone_number
        self.location = location
        if passport is not None:
            self.passport = passport
        if vehicle is not None:
            self.vehicle = vehicle

    @property
    def order_id(self):
        """Gets the order_id of this PublicCourierPositionForResponse.  # noqa: E501


        :return: The order_id of this PublicCourierPositionForResponse.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this PublicCourierPositionForResponse.


        :param order_id: The order_id of this PublicCourierPositionForResponse.  # noqa: E501
        :type: str
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")  # noqa: E501

        self._order_id = order_id

    @property
    def courier_id(self):
        """Gets the courier_id of this PublicCourierPositionForResponse.  # noqa: E501


        :return: The courier_id of this PublicCourierPositionForResponse.  # noqa: E501
        :rtype: str
        """
        return self._courier_id

    @courier_id.setter
    def courier_id(self, courier_id):
        """Sets the courier_id of this PublicCourierPositionForResponse.


        :param courier_id: The courier_id of this PublicCourierPositionForResponse.  # noqa: E501
        :type: str
        """
        if courier_id is None:
            raise ValueError("Invalid value for `courier_id`, must not be `None`")  # noqa: E501

        self._courier_id = courier_id

    @property
    def order_status(self):
        """Gets the order_status of this PublicCourierPositionForResponse.  # noqa: E501


        :return: The order_status of this PublicCourierPositionForResponse.  # noqa: E501
        :rtype: str
        """
        return self._order_status

    @order_status.setter
    def order_status(self, order_status):
        """Sets the order_status of this PublicCourierPositionForResponse.


        :param order_status: The order_status of this PublicCourierPositionForResponse.  # noqa: E501
        :type: str
        """
        if order_status is None:
            raise ValueError("Invalid value for `order_status`, must not be `None`")  # noqa: E501

        self._order_status = order_status

    @property
    def courier_name(self):
        """Gets the courier_name of this PublicCourierPositionForResponse.  # noqa: E501


        :return: The courier_name of this PublicCourierPositionForResponse.  # noqa: E501
        :rtype: str
        """
        return self._courier_name

    @courier_name.setter
    def courier_name(self, courier_name):
        """Sets the courier_name of this PublicCourierPositionForResponse.


        :param courier_name: The courier_name of this PublicCourierPositionForResponse.  # noqa: E501
        :type: str
        """
        if courier_name is None:
            raise ValueError("Invalid value for `courier_name`, must not be `None`")  # noqa: E501

        self._courier_name = courier_name

    @property
    def phone_number(self):
        """Gets the phone_number of this PublicCourierPositionForResponse.  # noqa: E501


        :return: The phone_number of this PublicCourierPositionForResponse.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this PublicCourierPositionForResponse.


        :param phone_number: The phone_number of this PublicCourierPositionForResponse.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def location(self):
        """Gets the location of this PublicCourierPositionForResponse.  # noqa: E501


        :return: The location of this PublicCourierPositionForResponse.  # noqa: E501
        :rtype: Point
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PublicCourierPositionForResponse.


        :param location: The location of this PublicCourierPositionForResponse.  # noqa: E501
        :type: Point
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def passport(self):
        """Gets the passport of this PublicCourierPositionForResponse.  # noqa: E501


        :return: The passport of this PublicCourierPositionForResponse.  # noqa: E501
        :rtype: Passport
        """
        return self._passport

    @passport.setter
    def passport(self, passport):
        """Sets the passport of this PublicCourierPositionForResponse.


        :param passport: The passport of this PublicCourierPositionForResponse.  # noqa: E501
        :type: Passport
        """

        self._passport = passport

    @property
    def vehicle(self):
        """Gets the vehicle of this PublicCourierPositionForResponse.  # noqa: E501


        :return: The vehicle of this PublicCourierPositionForResponse.  # noqa: E501
        :rtype: Vehicle
        """
        return self._vehicle

    @vehicle.setter
    def vehicle(self, vehicle):
        """Sets the vehicle of this PublicCourierPositionForResponse.


        :param vehicle: The vehicle of this PublicCourierPositionForResponse.  # noqa: E501
        :type: Vehicle
        """

        self._vehicle = vehicle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublicCourierPositionForResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicCourierPositionForResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
